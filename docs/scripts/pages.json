[{"name":"abstract class AVLTree<K : Comparable<K>, T> : BinaryTree<K, T, AVLNode<K, T>> ","description":"trees.AVLTree","location":"lib/trees/-a-v-l-tree/index.html","searchKeys":["AVLTree","abstract class AVLTree<K : Comparable<K>, T> : BinaryTree<K, T, AVLNode<K, T>> ","trees.AVLTree"]},{"name":"abstract class BSTree<K : Comparable<K>, T> : BinaryTree<K, T, BSNode<K, T>> ","description":"trees.BSTree","location":"lib/trees/-b-s-tree/index.html","searchKeys":["BSTree","abstract class BSTree<K : Comparable<K>, T> : BinaryTree<K, T, BSNode<K, T>> ","trees.BSTree"]},{"name":"abstract class BinaryTree<K : Comparable<K>, T, P : Node<K, T, P>>","description":"trees.BinaryTree","location":"lib/trees/-binary-tree/index.html","searchKeys":["BinaryTree","abstract class BinaryTree<K : Comparable<K>, T, P : Node<K, T, P>>","trees.BinaryTree"]},{"name":"abstract class Node<K : Comparable<K>, T, L : Node<K, T, L>>","description":"nodes.Node","location":"lib/nodes/-node/index.html","searchKeys":["Node","abstract class Node<K : Comparable<K>, T, L : Node<K, T, L>>","nodes.Node"]},{"name":"abstract fun delete(key: K, root: P? = this.root)","description":"trees.BinaryTree.delete","location":"lib/trees/-binary-tree/delete.html","searchKeys":["delete","abstract fun delete(key: K, root: P? = this.root)","trees.BinaryTree.delete"]},{"name":"abstract fun find(key: K, root: P? = this.root): Boolean","description":"trees.BinaryTree.find","location":"lib/trees/-binary-tree/find.html","searchKeys":["find","abstract fun find(key: K, root: P? = this.root): Boolean","trees.BinaryTree.find"]},{"name":"abstract fun findParent(key: K?, root: P? = this.root): K?","description":"trees.BinaryTree.findParent","location":"lib/trees/-binary-tree/find-parent.html","searchKeys":["findParent","abstract fun findParent(key: K?, root: P? = this.root): K?","trees.BinaryTree.findParent"]},{"name":"abstract fun insert(key: K, value: T, root: P? = this.root)","description":"trees.BinaryTree.insert","location":"lib/trees/-binary-tree/insert.html","searchKeys":["insert","abstract fun insert(key: K, value: T, root: P? = this.root)","trees.BinaryTree.insert"]},{"name":"abstract fun peek(key: K, root: P? = this.root): T?","description":"trees.BinaryTree.peek","location":"lib/trees/-binary-tree/peek.html","searchKeys":["peek","abstract fun peek(key: K, root: P? = this.root): T?","trees.BinaryTree.peek"]},{"name":"abstract var key: K","description":"nodes.Node.key","location":"lib/nodes/-node/key.html","searchKeys":["key","abstract var key: K","nodes.Node.key"]},{"name":"abstract var value: T","description":"nodes.Node.value","location":"lib/nodes/-node/value.html","searchKeys":["value","abstract var value: T","nodes.Node.value"]},{"name":"class AVLNode<K : Comparable<K>, T>(var key: K, var value: T) : Node<K, T, AVLNode<K, T>> ","description":"nodes.AVLNode","location":"lib/nodes/-a-v-l-node/index.html","searchKeys":["AVLNode","class AVLNode<K : Comparable<K>, T>(var key: K, var value: T) : Node<K, T, AVLNode<K, T>> ","nodes.AVLNode"]},{"name":"class BRNode<K : Comparable<K>, T>(var key: K, var value: T, var parent: BRNode<K, T>?) : Node<K, T, BRNode<K, T>> ","description":"nodes.BRNode","location":"lib/nodes/-b-r-node/index.html","searchKeys":["BRNode","class BRNode<K : Comparable<K>, T>(var key: K, var value: T, var parent: BRNode<K, T>?) : Node<K, T, BRNode<K, T>> ","nodes.BRNode"]},{"name":"class BRTree<K : Comparable<K>, T> : BinaryTree<K, T, BRNode<K, T>> ","description":"trees.BRTree","location":"lib/trees/-b-r-tree/index.html","searchKeys":["BRTree","class BRTree<K : Comparable<K>, T> : BinaryTree<K, T, BRNode<K, T>> ","trees.BRTree"]},{"name":"class BSNode<K : Comparable<K>, T>(var key: K, var value: T) : Node<K, T, BSNode<K, T>> ","description":"nodes.BSNode","location":"lib/nodes/-b-s-node/index.html","searchKeys":["BSNode","class BSNode<K : Comparable<K>, T>(var key: K, var value: T) : Node<K, T, BSNode<K, T>> ","nodes.BSNode"]},{"name":"const val BLACK: Int = 0","description":"nodes.BRNode.Companion.BLACK","location":"lib/nodes/-b-r-node/-companion/-b-l-a-c-k.html","searchKeys":["BLACK","const val BLACK: Int = 0","nodes.BRNode.Companion.BLACK"]},{"name":"const val RED: Int = 1","description":"nodes.BRNode.Companion.RED","location":"lib/nodes/-b-r-node/-companion/-r-e-d.html","searchKeys":["RED","const val RED: Int = 1","nodes.BRNode.Companion.RED"]},{"name":"constructor()","description":"nodes.Node.Node","location":"lib/nodes/-node/-node.html","searchKeys":["Node","constructor()","nodes.Node.Node"]},{"name":"constructor()","description":"trees.AVLTree.AVLTree","location":"lib/trees/-a-v-l-tree/-a-v-l-tree.html","searchKeys":["AVLTree","constructor()","trees.AVLTree.AVLTree"]},{"name":"constructor()","description":"trees.BRTree.BRTree","location":"lib/trees/-b-r-tree/-b-r-tree.html","searchKeys":["BRTree","constructor()","trees.BRTree.BRTree"]},{"name":"constructor()","description":"trees.BSTree.BSTree","location":"lib/trees/-b-s-tree/-b-s-tree.html","searchKeys":["BSTree","constructor()","trees.BSTree.BSTree"]},{"name":"constructor()","description":"trees.BinaryTree.BinaryTree","location":"lib/trees/-binary-tree/-binary-tree.html","searchKeys":["BinaryTree","constructor()","trees.BinaryTree.BinaryTree"]},{"name":"constructor()","description":"trees.BinaryTree.Iterate.Iterate","location":"lib/trees/-binary-tree/-iterate/-iterate.html","searchKeys":["Iterate","constructor()","trees.BinaryTree.Iterate.Iterate"]},{"name":"constructor(key: K, value: T)","description":"nodes.AVLNode.AVLNode","location":"lib/nodes/-a-v-l-node/-a-v-l-node.html","searchKeys":["AVLNode","constructor(key: K, value: T)","nodes.AVLNode.AVLNode"]},{"name":"constructor(key: K, value: T)","description":"nodes.BSNode.BSNode","location":"lib/nodes/-b-s-node/-b-s-node.html","searchKeys":["BSNode","constructor(key: K, value: T)","nodes.BSNode.BSNode"]},{"name":"constructor(key: K, value: T, parent: BRNode<K, T>?)","description":"nodes.BRNode.BRNode","location":"lib/nodes/-b-r-node/-b-r-node.html","searchKeys":["BRNode","constructor(key: K, value: T, parent: BRNode<K, T>?)","nodes.BRNode.BRNode"]},{"name":"fun getChildren(key: K, root: BRNode<K, T>? = this.root): Pair<K?, K?>","description":"trees.BRTree.getChildren","location":"lib/trees/-b-r-tree/get-children.html","searchKeys":["getChildren","fun getChildren(key: K, root: BRNode<K, T>? = this.root): Pair<K?, K?>","trees.BRTree.getChildren"]},{"name":"fun getColor(key: K?, root: BRNode<K, T>? = this.root): Int","description":"trees.BRTree.getColor","location":"lib/trees/-b-r-tree/get-color.html","searchKeys":["getColor","fun getColor(key: K?, root: BRNode<K, T>? = this.root): Int","trees.BRTree.getColor"]},{"name":"fun isLeaf(key: K, root: BRNode<K, T>? = this.root): Boolean","description":"trees.BRTree.isLeaf","location":"lib/trees/-b-r-tree/is-leaf.html","searchKeys":["isLeaf","fun isLeaf(key: K, root: BRNode<K, T>? = this.root): Boolean","trees.BRTree.isLeaf"]},{"name":"fun isRoot(key: K): Boolean","description":"trees.BRTree.isRoot","location":"lib/trees/-b-r-tree/is-root.html","searchKeys":["isRoot","fun isRoot(key: K): Boolean","trees.BRTree.isRoot"]},{"name":"fun printNodes(): String","description":"trees.BinaryTree.printNodes","location":"lib/trees/-binary-tree/print-nodes.html","searchKeys":["printNodes","fun printNodes(): String","trees.BinaryTree.printNodes"]},{"name":"inner class Iterate : Iterator<K?> ","description":"trees.BinaryTree.Iterate","location":"lib/trees/-binary-tree/-iterate/index.html","searchKeys":["Iterate","inner class Iterate : Iterator<K?> ","trees.BinaryTree.Iterate"]},{"name":"object Companion","description":"nodes.BRNode.Companion","location":"lib/nodes/-b-r-node/-companion/index.html","searchKeys":["Companion","object Companion","nodes.BRNode.Companion"]},{"name":"open operator override fun hasNext(): Boolean","description":"trees.BinaryTree.Iterate.hasNext","location":"lib/trees/-binary-tree/-iterate/has-next.html","searchKeys":["hasNext","open operator override fun hasNext(): Boolean","trees.BinaryTree.Iterate.hasNext"]},{"name":"open operator override fun next(): K?","description":"trees.BinaryTree.Iterate.next","location":"lib/trees/-binary-tree/-iterate/next.html","searchKeys":["next","open operator override fun next(): K?","trees.BinaryTree.Iterate.next"]},{"name":"open override fun delete(key: K, root: BRNode<K, T>?)","description":"trees.BRTree.delete","location":"lib/trees/-b-r-tree/delete.html","searchKeys":["delete","open override fun delete(key: K, root: BRNode<K, T>?)","trees.BRTree.delete"]},{"name":"open override fun find(key: K, root: BRNode<K, T>?): Boolean","description":"trees.BRTree.find","location":"lib/trees/-b-r-tree/find.html","searchKeys":["find","open override fun find(key: K, root: BRNode<K, T>?): Boolean","trees.BRTree.find"]},{"name":"open override fun findParent(key: K?, root: BRNode<K, T>?): K?","description":"trees.BRTree.findParent","location":"lib/trees/-b-r-tree/find-parent.html","searchKeys":["findParent","open override fun findParent(key: K?, root: BRNode<K, T>?): K?","trees.BRTree.findParent"]},{"name":"open override fun insert(key: K, value: T, root: BRNode<K, T>?)","description":"trees.BRTree.insert","location":"lib/trees/-b-r-tree/insert.html","searchKeys":["insert","open override fun insert(key: K, value: T, root: BRNode<K, T>?)","trees.BRTree.insert"]},{"name":"open override fun peek(key: K, root: BRNode<K, T>?): T?","description":"trees.BRTree.peek","location":"lib/trees/-b-r-tree/peek.html","searchKeys":["peek","open override fun peek(key: K, root: BRNode<K, T>?): T?","trees.BRTree.peek"]},{"name":"open override var key: K","description":"nodes.AVLNode.key","location":"lib/nodes/-a-v-l-node/key.html","searchKeys":["key","open override var key: K","nodes.AVLNode.key"]},{"name":"open override var key: K","description":"nodes.BRNode.key","location":"lib/nodes/-b-r-node/key.html","searchKeys":["key","open override var key: K","nodes.BRNode.key"]},{"name":"open override var key: K","description":"nodes.BSNode.key","location":"lib/nodes/-b-s-node/key.html","searchKeys":["key","open override var key: K","nodes.BSNode.key"]},{"name":"open override var value: T","description":"nodes.AVLNode.value","location":"lib/nodes/-a-v-l-node/value.html","searchKeys":["value","open override var value: T","nodes.AVLNode.value"]},{"name":"open override var value: T","description":"nodes.BRNode.value","location":"lib/nodes/-b-r-node/value.html","searchKeys":["value","open override var value: T","nodes.BRNode.value"]},{"name":"open override var value: T","description":"nodes.BSNode.value","location":"lib/nodes/-b-s-node/value.html","searchKeys":["value","open override var value: T","nodes.BSNode.value"]},{"name":"operator fun iterator(): BinaryTree.Iterate<K, T, P>","description":"trees.BinaryTree.iterator","location":"lib/trees/-binary-tree/iterator.html","searchKeys":["iterator","operator fun iterator(): BinaryTree.Iterate<K, T, P>","trees.BinaryTree.iterator"]},{"name":"var color: Int","description":"nodes.BRNode.color","location":"lib/nodes/-b-r-node/color.html","searchKeys":["color","var color: Int","nodes.BRNode.color"]},{"name":"var left: L?","description":"nodes.Node.left","location":"lib/nodes/-node/left.html","searchKeys":["left","var left: L?","nodes.Node.left"]},{"name":"var parent: BRNode<K, T>?","description":"nodes.BRNode.parent","location":"lib/nodes/-b-r-node/parent.html","searchKeys":["parent","var parent: BRNode<K, T>?","nodes.BRNode.parent"]},{"name":"var right: L?","description":"nodes.Node.right","location":"lib/nodes/-node/right.html","searchKeys":["right","var right: L?","nodes.Node.right"]}]